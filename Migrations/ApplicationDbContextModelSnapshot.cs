// <auto-generated />
using System;
using CompatibleAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CompatibleAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompatibleAPI.Domain.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Compatibility")
                        .HasColumnType("integer")
                        .HasColumnName("compatibility");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_accepted");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rejected");

                    b.Property<DateTime?>("MatchedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("matched_at");

                    b.Property<Guid>("MatchedProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("matched_profile_id");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<DateTime?>("RetiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("retired_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MatchedProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("CompatibleAPI.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<DateTime?>("RetiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("retired_at");

                    b.Property<Guid>("SenderProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_profile_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("SenderProfileId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("CompatibleAPI.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<DateTime?>("RetiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("retired_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("photos", (string)null);
                });

            modelBuilder.Entity("CompatibleAPI.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RetiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("retired_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("CompatibleAPI.Domain.Entities.Match", b =>
                {
                    b.HasOne("CompatibleAPI.Domain.Entities.Profile", "MatchedProfile")
                        .WithMany("MatchedBy")
                        .HasForeignKey("MatchedProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompatibleAPI.Domain.Entities.Profile", "Profile")
                        .WithMany("Matches")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchedProfile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CompatibleAPI.Domain.Entities.Message", b =>
                {
                    b.HasOne("CompatibleAPI.Domain.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompatibleAPI.Domain.Entities.Profile", "SenderProfile")
                        .WithMany()
                        .HasForeignKey("SenderProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("SenderProfile");
                });

            modelBuilder.Entity("CompatibleAPI.Domain.Entities.Photo", b =>
                {
                    b.HasOne("CompatibleAPI.Domain.Entities.Profile", "Profile")
                        .WithMany("Photos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CompatibleAPI.Domain.Entities.Profile", b =>
                {
                    b.Navigation("MatchedBy");

                    b.Navigation("Matches");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
